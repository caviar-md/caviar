
# Copyright (C) 2010-2019 The ESPResSo project
#
# This file is part of ESPResSo.
#
# ESPResSo is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# ESPResSo is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

#=======================================================================
# 
# Copyright (C) 2019 by Morad Biagooi and Ehsan Nedaaee Oskoee.
# 
# This file is part of the CAVIAR package.
# 
# The CAVIAR package is free software; you can use it, redistribute
# it, and/or modify it under the terms of the GNU Lesser General
# Public License as published by the Free Software Foundation; either
# version 3.0 of the License, or (at your option) any later version.
# The full text of the license can be found in the file LICENSE at
# the top level of the CAVIAR distribution.
# 
#=======================================================================

# THIS FILE IS GENERATED by modifications of an ESPResSo package script file.


import sys
import espressomd
import timeit

#from datetime import datetime


from espressomd.electrostatics import P3M
from espressomd.electrostatic_extensions import ICC

start_1 = timeit.default_timer()

S = espressomd.System(box_l=[1.0, 1.0, 1.0])
S.seed = 1
S.periodicity = [1, 1, 1]
# Parameters
box_l = 20.0
#nicc = 10
nicc = int(sys.argv[1])
q_test = 1.0
q_dist = 5.0

# System
S.box_l = [box_l, box_l, box_l + 5.0]
S.cell_system.skin = 0.4
S.time_step = 0.001

# ICC particles
nicc_per_electrode = nicc * nicc
nicc_tot = 2 * nicc_per_electrode
iccArea = box_l * box_l / nicc_per_electrode

iccNormals = []
iccAreas = []
iccSigmas = []
iccEpsilons = []

l = box_l / nicc
for xi in range(nicc):
    for yi in range(nicc):
        S.part.add(pos=[l * xi, l * yi, 0], q=-0.0001, fix=[1, 1, 1])
        iccNormals.append([0, 0, 1])

for xi in range(nicc):
    for yi in range(nicc):
        S.part.add(pos=[l * xi, l * yi, box_l],
                    q=0.0001, fix=[1, 1, 1])
        iccNormals.append([0, 0, -1])

iccAreas.extend([iccArea] * nicc_tot)
iccSigmas.extend([0] * nicc_tot)
iccEpsilons.extend([10000000] * nicc_tot)

# ADDING atoms
b2 = box_l * 0.5
num_of_atoms=9
l2 = (box_l - 2 ) / num_of_atoms
two_particle_test=1
#if (two_particle_test==0) :
#    S.part.add(pos=[b2, b2, b2 - q_dist / 2], q=q_test)
#    S.part.add(pos=[b2, b2, b2 + q_dist / 2], q=-q_test)

#else :
#    for xi in range(num_of_atoms+1):
#        for yi in range(num_of_atoms+1):
#            S.part.add(pos=[1+l2 * xi, 1+l2 * yi, 13.5], q=-q_test)
#            S.part.add(pos=[1+l2 * xi, 1+l2 * yi, 8.5], q=+q_test)


S.part.add(q=-q_test, pos=[5. + 5.1383929933778880, 5. + 1.7571485245201257, 5. + 3.0861484940034787])
S.part.add(q=+q_test, pos=[5. + 5.3449906924227166, 5. + 9.4757240074460611, 5. + 1.7171717171717171])
S.part.add(q=-q_test, pos=[5. + 7.0218804357777165, 5. + 2.2640300283804815, 5. + 4.9473587842167905])
S.part.add(q=+q_test, pos=[5. + 1.2469101895083767, 5. + 0.8389026213799627, 5. + 3.8960603008941379])
S.part.add(q=-q_test, pos=[5. + 2.7721321981140714, 5. + 3.6803076078000547, 5. + 9.8339894412401971])
S.part.add(q=+q_test, pos=[5. + 5.3535353535353538, 5. + 7.6563215233910098, 5. + 6.4643412981781561])
S.part.add(q=-q_test, pos=[5. + 7.6709695138698164, 5. + 7.8018859287741460, 5. + 8.2291189844059929])
S.part.add(q=+q_test, pos=[5. + 1.5191186792395253, 5. + 6.2543867679819343, 5. + 3.1465714547285546])
S.part.add(q=-q_test, pos=[5. + 3.4688272452622906, 5. + 9.1714730385425245, 5. + 5.1972901217614211])
S.part.add(q=+q_test, pos=[5. + 4.0114132259147368, 5. + 6.0673197229088469, 5. + 7.8537642283865852])
S.part.add(q=-q_test, pos=[5. + 9.3149012786475023, 5. + 8.6987701791327172, 5. + 8.6648967011504769])
S.part.add(q=+q_test, pos=[5. + 6.7447892825536329, 5. + 7.5836919039335955, 5. + 5.8186090512374502])
S.part.add(q=-q_test, pos=[5. + 3.8920931368061278, 5. + 3.5561048551985106, 5. + 2.0021971985718210])
S.part.add(q=+q_test, pos=[5. + 8.2687906252860941, 5. + 4.1588086301077238, 5. + 4.6348683206689252])
S.part.add(q=-q_test, pos=[5. + 9.7912661356770112, 5. + 1.2643046782019591, 5. + 2.1260947847050566])
S.part.add(q=+q_test, pos=[5. + 9.5840581036955665, 5. + 7.3743477066739906, 5. + 4.0901461747383197])
S.part.add(q=-q_test, pos=[5. + 7.8006652629009121, 5. + 7.5785040739723515, 5. + 9.5678842808752176])
S.part.add(q=+q_test, pos=[5. + 0.2807531508437853, 5. + 3.1871585950135799, 5. + 7.5690439134547898])
S.part.add(q=-q_test, pos=[5. + 2.4297354206719763, 5. + 5.8952058347828737, 5. + 0.4339467179346334])
S.part.add(q=+q_test, pos=[5. + 9.5599499526991973, 5. + 3.1911257591015900, 5. + 0.5935487808599591])
S.part.add(q=-q_test, pos=[5. + 4.4185052946382255, 5. + 9.1498062192926248, 5. + 5.7221764472519761])
S.part.add(q=+q_test, pos=[5. + 1.1883182275931521, 5. + 5.6974579633189908, 5. + 2.5203698617595900])
S.part.add(q=-q_test, pos=[5. + 4.9583447770758946, 5. + 2.3671762946687420, 5. + 4.7694467331929564])
S.part.add(q=+q_test, pos=[5. + 4.0605450273123989, 5. + 8.7295919924318710, 5. + 4.2692788916353868])
S.part.add(q=-q_test, pos=[5. + 3.5820440050047302, 5. + 3.8194635173487139, 5. + 0.4315053861881656])
S.part.add(q=+q_test, pos=[5. + 1.6057859562391283, 5. + 5.2232292715676403, 5. + 6.9654246391406511])
S.part.add(q=-q_test, pos=[5. + 0.9707345356892184, 5. + 4.0080563947633436, 5. + 7.7338338063413596])
S.part.add(q=+q_test, pos=[5. + 2.4480454087704842, 5. + 3.4279349385089568, 5. + 2.2997345051725717])
S.part.add(q=-q_test, pos=[5. + 2.9784247306905915, 5. + 3.0452561872501449, 5. + 8.8714944001953064])
S.part.add(q=+q_test, pos=[5. + 0.3665049284384632, 5. + 6.5110317678293512, 5. + 3.9857792425768257])
S.part.add(q=-q_test, pos=[5. + 6.7624889377155242, 5. + 7.3255210717446371, 5. + 9.3774604046507370])
S.part.add(q=+q_test, pos=[5. + 2.3326924837498857, 5. + 8.3844487167750010, 5. + 9.6716408801000942])
S.part.add(q=-q_test, pos=[5. + 7.7860172724221064, 5. + 4.3147486954133480, 5. + 6.7405169519973143])
S.part.add(q=+q_test, pos=[5. + 8.0933199060087286, 5. + 1.5874759681406208, 5. + 2.7986816808569075])
S.part.add(q=-q_test, pos=[5. + 1.3531081204797217, 5. + 8.6413988830907265, 5. + 7.5016021239586195])
S.part.add(q=+q_test, pos=[5. + 2.0797094815221704, 5. + 1.3994934236626080, 5. + 2.9457719185815860])
S.part.add(q=-q_test, pos=[5. + 8.0277091153224092, 5. + 2.1892642436449083, 5. + 5.6306265067594374])
S.part.add(q=+q_test, pos=[5. + 7.1555433488968232, 5. + 1.9753425493606762, 5. + 9.8977692331166658])
S.part.add(q=-q_test, pos=[5. + 2.5002288748512314, 5. + 4.3058988678324024, 5. + 7.5522597576978239])
S.part.add(q=+q_test, pos=[5. + 8.6087460709817201, 5. + 8.9474808508041139, 5. + 9.7802801428179080])
S.part.add(q=-q_test, pos=[5. + 3.9537367634044371, 5. + 4.3217675241844429, 5. + 1.2713235069730537])
S.part.add(q=+q_test, pos=[5. + 4.5765815252220090, 5. + 2.3781622875278465, 5. + 9.8599285910464154])
S.part.add(q=-q_test, pos=[5. + 6.5278159235863162, 5. + 6.0419909060392447, 5. + 2.4187494278128718])
S.part.add(q=+q_test, pos=[5. + 4.5485062101376297, 5. + 7.8992340321645456, 5. + 0.7879398211724495])
S.part.add(q=-q_test, pos=[5. + 4.7636485702950964, 5. + 1.5258323415423114, 5. + 2.4572004028197383])
S.part.add(q=+q_test, pos=[5. + 9.4494796911715344, 5. + 6.1399493423662612, 5. + 9.8812902438280084])
S.part.add(q=-q_test, pos=[5. + 4.7724983978760411, 5. + 7.9965821355549451, 5. + 7.4414843297018525])
S.part.add(q=+q_test, pos=[5. + 3.8069516921480666, 5. + 4.7987427141505687, 5. + 5.2686990753456007])
S.part.add(q=-q_test, pos=[5. + 0.9808050291433977, 5. + 5.9418963044340689, 5. + 3.4715737434770668])
S.part.add(q=+q_test, pos=[5. + 1.4333669016448474, 5. + 7.7948671000030521, 5. + 7.1094632121822450])
S.part.add(q=-q_test, pos=[5. + 4.4612286002014097, 5. + 7.0453782538374687, 5. + 0.9530348805273277])
S.part.add(q=+q_test, pos=[5. + 9.6276969086636761, 5. + 5.5128322499923712, 5. + 7.4021178552900606])
S.part.add(q=-q_test, pos=[5. + 5.7899234032164548, 5. + 6.3782843541151699, 5. + 7.8162287527846441])
S.part.add(q=+q_test, pos=[5. + 1.8789099453752021, 5. + 3.0208428697854681, 5. + 2.8279776618145198])
S.part.add(q=-q_test, pos=[5. + 6.8396960541975647, 5. + 2.9289877628246210, 5. + 5.6535139918825719])
S.part.add(q=+q_test, pos=[5. + 4.1841374469773260, 5. + 3.0657023406268120, 5. + 4.4450547773810616])
S.part.add(q=-q_test, pos=[5. + 5.6565656565656566, 5. + 4.8790014953156948, 5. + 6.0660990570356130])
S.part.add(q=+q_test, pos=[5. + 4.1581982971711069, 5. + 1.3039763190820592, 5. + 2.5594311697030729])
S.part.add(q=-q_test, pos=[5. + 0.3573499343892093, 5. + 9.7705148158320370, 5. + 1.1449845890933503])
S.part.add(q=+q_test, pos=[5. + 3.7804022094052305, 5. + 6.4667826299246238, 5. + 3.5042265555860723])
S.part.add(q=-q_test, pos=[5. + 5.5302267386859532, 5. + 3.5838750038145810, 5. + 5.6541243248191888])
S.part.add(q=+q_test, pos=[5. + 4.7560194085873846, 5. + 1.6366077695382832, 5. + 6.1518508346302907])
S.part.add(q=-q_test, pos=[5. + 1.7214440477280357, 5. + 5.5467057279746106, 5. + 2.9219689340535262])
S.part.add(q=+q_test, pos=[5. + 8.7210473313192338, 5. + 8.3502700723244523, 5. + 8.4485336751197782])
S.part.add(q=-q_test, pos=[5. + 8.9548048460435172, 5. + 5.9473893008636214, 5. + 5.4054136531477921])
S.part.add(q=+q_test, pos=[5. + 1.6817724068479356, 5. + 6.5491775763679083, 5. + 6.9046965119472672])
S.part.add(q=-q_test, pos=[5. + 2.6381641185266562, 5. + 1.0668619732063840, 5. + 8.1488602032408686])
S.part.add(q=+q_test, pos=[5. + 1.9133937562940584, 5. + 4.2326589154383720, 5. + 3.5182642131282615])
S.part.add(q=-q_test, pos=[5. + 8.3917727120144043, 5. + 1.3732491073880801, 5. + 2.6265677927309348])
S.part.add(q=+q_test, pos=[5. + 1.7724068479355488, 5. + 4.7987427141505687, 5. + 3.8014586957185146])
S.part.add(q=-q_test, pos=[5. + 5.0480637187585824, 5. + 5.0273123989136073, 5. + 3.5188745460648785])
S.part.add(q=+q_test, pos=[5. + 5.2555769172083373, 5. + 1.2060178827550430, 5. + 5.1951539564832618])
S.part.add(q=-q_test, pos=[5. + 6.0709817205285486, 5. + 7.3285727364277209, 5. + 5.5683725472245111])
S.part.add(q=+q_test, pos=[5. + 3.4410570966462206, 5. + 8.0191644542097720, 5. + 5.9095486587933719])
S.part.add(q=-q_test, pos=[5. + 2.6689859318258109, 5. + 6.7063383075467664, 5. + 5.5210717446366990])
S.part.add(q=+q_test, pos=[5. + 7.8888583722420584, 5. + 8.8766822301565504, 5. + 8.8995697152796858])
S.part.add(q=-q_test, pos=[5. + 0.6808263907961793, 5. + 8.0054319631358908, 5. + 9.0732094357472004])
S.part.add(q=+q_test, pos=[5. + 6.4408434801184047, 5. + 1.6512557600170894, 5. + 3.0132137080777563])
S.part.add(q=-q_test, pos=[5. + 1.6625469193445024, 5. + 2.8514754798742716, 5. + 8.4192376941621649])
S.part.add(q=+q_test, pos=[5. + 5.3629955140529155, 5. + 0.3634532637553786, 5. + 2.0717751533461501])
S.part.add(q=-q_test, pos=[5. + 0.2120906954743813, 5. + 3.5811285055998048, 5. + 6.2144099606335255])
S.part.add(q=+q_test, pos=[5. + 5.2000366199761974, 5. + 5.4600384509750066, 5. + 1.5365131679331074])
S.part.add(q=-q_test, pos=[5. + 8.2330861484940030, 5. + 0.3332417833928408, 5. + 0.2593914980621929])
S.part.add(q=+q_test, pos=[5. + 3.7810125423418475, 5. + 6.1628368274893957, 5. + 0.2038512008300528])
S.part.add(q=-q_test, pos=[5. + 6.2653727608410392, 5. + 9.1516372181024757, 5. + 3.7477493972962250])
S.part.add(q=+q_test, pos=[5. + 7.2940889255088655, 5. + 3.9580090939607557, 5. + 9.8220879489761668])
S.part.add(q=-q_test, pos=[5. + 5.9724129512649151, 5. + 1.1230126033751411, 5. + 2.2158137263877444])
S.part.add(q=+q_test, pos=[5. + 7.9913943055937011, 5. + 8.7060941743721205, 5. + 7.3819768683817024])
S.part.add(q=-q_test, pos=[5. + 0.1361042448655742, 5. + 7.3950990265189658, 5. + 4.1832219475724006])
S.part.add(q=+q_test, pos=[5. + 3.6201898135432877, 5. + 2.0388171747688366, 5. + 1.8313039763190821])
S.part.add(q=-q_test, pos=[5. + 0.7626110043028472, 5. + 1.1553602490158381, 5. + 1.5911379657603222])
S.part.add(q=+q_test, pos=[5. + 7.8821447099392721, 5. + 0.4034300711037871, 5. + 7.9059476944673319])
S.part.add(q=-q_test, pos=[5. + 5.9898074399584971, 5. + 4.0257560499252341, 5. + 2.2902743446550091])
S.part.add(q=+q_test, pos=[5. + 1.8279471451676890, 5. + 6.1426958405810366, 5. + 3.3186853428545273])
S.part.add(q=-q_test, pos=[5. + 6.0511459000884980, 5. + 9.6405139003326319, 5. + 3.7804022094052305])
S.part.add(q=+q_test, pos=[5. + 1.8438158015197290, 5. + 3.0007018828771095, 5. + 0.5416704812475205])
S.part.add(q=-q_test, pos=[5. + 1.4400805639476335, 5. + 0.1043669321614941, 5. + 8.8479965821355542])
S.part.add(q=+q_test, pos=[5. + 9.5797857731392480, 5. + 6.2586590985382529, 5. + 9.5556776221428787])
S.part.add(q=-q_test, pos=[5. + 6.3099270652140742, 5. + 0.3912234123714486, 5. + 3.5127712166987091])
S.part.add(q=+q_test, pos=[5. + 1.4632732155390766, 5. + 1.0601483109035978, 5. + 1.9741218834874423])



# Actors
#p3m = P3M(prefactor=1, mesh=32, cao=7, accuracy=1e-7)
p3m = P3M(prefactor=1, mesh=32, cao=7, accuracy=1e-5, alpha=1.112583061, r_cut=4.9, tune=False)
icc = ICC(
    n_icc=nicc_tot,
    convergence=1e-6,
    relaxation=0.75,
    ext_field=[0, 0, 0],
    max_iterations=100,
    first_id=0,
    eps_out=1,
    normals=iccNormals,
    areas=iccAreas,
    sigmas=iccSigmas,
    epsilons=iccEpsilons)

S.actors.add(p3m)
S.actors.add(icc)


#  time start


#start2=datetime.now()

#Statements





# Run
S.integrator.run()


fxyz= open("out.xyz","w+")

fxyz.write("%d\nAtom\n" %len(S.part))
for i in range(len(S.part)):
    fxyz.write("%d %f %f %f\n"  % (S.part[i].type, S.part[i].pos[0], S.part[i].pos[1], S.part[i].pos[2]))
fxyz.close()

# Analyze

fileq= open("bench.dat","a")

QL = sum(S.part[:nicc_per_electrode].q)
QR = sum(S.part[nicc_per_electrode:nicc_tot].q)
charge = (abs(QL) + abs(QR))/2.0
print(QL, QR, QL + QR) 
#start_2 = timeit.default_timer()

# Run
S.integrator.run(199)

#timestop
start_3 = timeit.default_timer()

fileq.write( "%d %d %.12f %.12f %.12f\n" % (nicc , len(S.part)-(2*nicc*nicc), charge, iccArea, start_3 - start_1) )

fileq.close()
#Your statements here
#print ("TT" ,  datetime.now()-start2)

#print('Time: ', stop - start)  

testcharge_dipole = q_test * q_dist
induced_dipole = 0.5 * (abs(QL) + abs(QR)) * box_l

# Result
#self.assertAlmostEqual(1, induced_dipole / testcharge_dipole, places=4)

# Test applying changes
#enegry_pre_change = S.analysis.energy()['total']
#pressure_pre_change = S.analysis.pressure()['total']
#icc.set_params(sigmas=[2.0] * nicc_tot)
#icc.set_params(epsilons=[20.0] * nicc_tot)
#enegry_post_change = S.analysis.energy()['total']
#pressure_post_change = S.analysis.pressure()['total']
#self.assertNotAlmostEqual(enegry_pre_change, enegry_post_change)
#self.assertNotAlmostEqual(pressure_pre_change, pressure_post_change)


